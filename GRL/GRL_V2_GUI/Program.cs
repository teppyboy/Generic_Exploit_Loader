using System;
using System.Reflection;
using System.Windows.Forms;
using System.IO;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.IO.Compression;
using System.Net;

namespace GRL_V2_GUI
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [DllImport("kernel32.dll")]
        public static extern IntPtr GetConsoleWindow();

        [DllImport("user32.dll")]
        public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        public const int SW_HIDE = 0;
        public const int SW_SHOW = 5;
        [STAThread]
        public static void Main(string[] args)
        {
            var handle = GetConsoleWindow();
            if (args == null || args.Length == 0)
            {
                ShowWindow(handle, SW_HIDE);
                DefaultForm.isConsoleVisible = false;
            }
            else
            {
                if (args[0] != "-EnableDebug")
                {
                    ShowWindow(handle, SW_HIDE);
                    DefaultForm.isConsoleVisible = false;
                }
                else if (args[0] == "-Cleanup")
                {
                    ShowWindow(handle, SW_HIDE);
                    Console.WriteLine("-Cleanup detected, cleaning up LiteBootstrapper");
                    File.Delete("LiteBootstrapper.exe");
                    Console.WriteLine("Done.");
                }
                else DefaultForm.isConsoleVisible = true;
            }
            Application.SetCompatibleTextRenderingDefault(false);
            FileInfo fileInfo = new FileInfo(Assembly.GetExecutingAssembly().Location);
            DateTime lastModified = fileInfo.LastWriteTime;
            Console.Title = "[GEL] Bootstrapper";
            Console.WriteLine("[Generic Exploit Loader] Bootstrapper");
            Console.WriteLine("Build: " + lastModified.ToShortDateString().Replace("/", ""));
            Console.WriteLine("Build date: " + lastModified.ToString());
            Console.WriteLine("======================================");
            Console.WriteLine("Checking for required DLL...");
            Console.Write("ScintillaNET.dll - ");
            if (File.Exists("ScintillaNET.dll"))
            {
                Console.Write("FOUND");
                Console.Write("\nBunifu_UI_v1.5.3.dll - ");
                if (File.Exists("Bunifu_UI_v1.5.3.dll"))
                {
                    Console.Write("FOUND");
                    Console.Write("\nMonaco directory - ");
                    if (Directory.Exists("Monaco"))
                    {
                        Console.Write("FOUND");
                        Console.Write("\nNewtonsoft.Json.dll - ");
                        if (File.Exists("Newtonsoft.Json.dll"))
                        {
                            Console.Write("FOUND");
                            Application.EnableVisualStyles();
                            Console.WriteLine("\nEnabled Visual Styles");
                            Console.WriteLine("======================================");
                            Console.WriteLine("Begin is log from UI.");
                            Application.Run(new DefaultForm());
                        }
                        else
                        {
                            NotFoundFunc();
                        }
                    }
                    else
                    {
                        NotFoundFunc();
                    }
                }
                else
                {
                    NotFoundFunc();
                }
            }
            else
            {
                NotFoundFunc();
            }
            Console.ReadKey();
            //Application.EnableVisualStyles(); // Disable Visual Styles
            //Application.Run(new MainForm());
        }
        private static void NotFoundFunc()
        {
            Console.Write("NOT FOUND");
            Console.WriteLine("\nA dll/directory was not found, reinstalling GEL.");
            Downloader();
            Extract();
            Application.EnableVisualStyles();
            Console.WriteLine("Enabled Visual Styles");
            Console.WriteLine("======================================");
            Console.WriteLine("Begin is log from UI.");
            Application.Run(new DefaultForm());
        }
        static void Downloader()
        {
            using (var client = new WebClient())
            {
                Console.WriteLine("Downloading Bunifu_UI_v1.5.3.dll");
                client.DownloadFile("https://github.com/teppyboy/Generic_Exploit_Loader/raw/master/GRL/GRL_V2_GUI/lib/Bunifu_UI_v1.5.3.dll", "Bunifu_UI_v1.5.3.dll");
                Console.WriteLine("Done!");
                Console.WriteLine("Downloading ScintillaNET.dll");
                client.DownloadFile("https://github.com/teppyboy/Generic_Exploit_Loader/raw/master/GRL/GRL_V2_GUI/lib/ScintillaNET.dll", "ScintillaNET.dll");
                Console.WriteLine("Done!");
                Console.WriteLine("Downloading Newtonsoft.Json.dll");
                client.DownloadFile("https://github.com/teppyboy/Generic_Exploit_Loader/raw/master/GRL/GRL_V2_GUI/lib/Newtonsoft.Json.dll", "Newtonsoft.Json.dll");
                Console.WriteLine("Done!");
                Console.WriteLine("Downloading SirHurtInjector.dll");
                client.DownloadFile("https://github.com/teppyboy/Generic_Exploit_Loader/raw/master/GRL/GRL_V2_GUI/lib/SirHurtInjector.dll", "SirHurtInjector.dll");
                Console.WriteLine("Done!");
                Console.WriteLine("Downloading Monaco.zip");
                client.DownloadFile("https://github.com/teppyboy/Generic_Exploit_Loader/raw/master/GRL/GRL_V2_GUI/lib/Monaco.zip", "Monaco.zip");
                Console.WriteLine("Done!");
                client.Dispose();
            }
        }
        static void Extract()
        {
            try
            {

                DirectoryInfo di = new DirectoryInfo("Monaco");
                foreach (FileInfo file in di.EnumerateFiles())
                {
                    file.Delete();
                }
                foreach (DirectoryInfo dir in di.EnumerateDirectories())
                {
                    dir.Delete(true);
                }
                Directory.Delete("Monaco");

            }
            catch
            {

            }
            string zipPath = @"Monaco.zip";
            string extractPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
            ZipFile.ExtractToDirectory(zipPath, extractPath);
            File.Delete("Monaco.zip");
            Console.WriteLine("Done!");
        }
    }
}
