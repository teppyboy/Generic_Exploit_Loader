using System;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace ExploitAPI
{
    // Token: 0x02000002 RID: 2
    public class ExploitAPI
    {
        // Token: 0x06000001 RID: 1
        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        public static extern bool WaitNamedPipe(string name, int timeout);

        // Token: 0x06000002 RID: 2 RVA: 0x00002050 File Offset: 0x00000250
        public static bool NamedPipeExist(string pipeName)
        {
            bool result;
            try
            {
                int timeout = 0;
                if (!ExploitAPI.WaitNamedPipe(Path.GetFullPath(string.Format("\\\\.\\pipe\\{0}", pipeName)), timeout))
                {
                    int lastWin32Error = Marshal.GetLastWin32Error();
                    if (lastWin32Error == 0)
                    {
                        return false;
                    }
                    if (lastWin32Error == 2)
                    {
                        return false;
                    }
                }
                result = true;
            }
            catch (Exception)
            {
                result = false;
            }
            return result;
        }

        // Token: 0x06000003 RID: 3 RVA: 0x000020A8 File Offset: 0x000002A8
        public static void SMTP(string pipe, string input)
        {
            if (ExploitAPI.NamedPipeExist(pipe))
            {
                try
                {
                    using (NamedPipeClientStream namedPipeClientStream = new NamedPipeClientStream(".", pipe, PipeDirection.Out))
                    {
                        namedPipeClientStream.Connect();
                        using (StreamWriter streamWriter = new StreamWriter(namedPipeClientStream))
                        {
                            streamWriter.Write(input);
                            streamWriter.Dispose();
                        }
                        namedPipeClientStream.Dispose();
                    }
                    return;
                }
                catch (IOException)
                {
                    MessageBox.Show("Error occured sending message to the game!", "Connection Failed!", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    return;
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message.ToString());
                    return;
                }
            }
            MessageBox.Show("Error occured. Did the dll properly inject?", "Oops", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        }

        // Token: 0x06000004 RID: 4 RVA: 0x00002174 File Offset: 0x00000374
        public static string ReadURL(string url)
        {
            return client.DownloadString(url);
        }

        // Token: 0x06000005 RID: 5 RVA: 0x00002184 File Offset: 0x00000384
        public static bool IsUpdated()
        {
            bool result = false;
            string text = ReadURL("https://pastebin.com/raw/Ly9mJwH7");
            if (text.Length > 0)
            {
                result = Convert.ToBoolean(text.Split(new char[]
                {
                    ' '
                })[0]);
            }
            else
            {
                MessageBox.Show("Could not check for the latest version. Did your fireall block us?", "Error");
            }
            return result;
        }

        // Token: 0x06000006 RID: 6 RVA: 0x000021D4 File Offset: 0x000003D4
        public static bool DownloadLatestVersion()
        {
            if (File.Exists("exploit-main.dll"))
            {
                File.Delete("exploit-main.dll");
            }
            string text = ReadURL("https://pastebin.com/raw/Ly9mJwH7");
            if (text.Length > 0)
            {
                client.DownloadFile(text.Split(new char[]
                {
                    ' '
                })[1], "exploit-main.dll");
            }
            return File.Exists("exploit-main.dll");
        }

        // Token: 0x06000007 RID: 7 RVA: 0x0000223E File Offset: 0x0000043E
        public static bool isAPIAttached()
        {
            return ExploitAPI.NamedPipeExist(cmdpipe);
        }

        // Token: 0x06000008 RID: 8 RVA: 0x00002250 File Offset: 0x00000450
        public static bool LaunchExploit()
        {
            if (ExploitAPI.NamedPipeExist(cmdpipe))
            {
                MessageBox.Show("Dll already injected", "No problems");
            }
            else if (IsUpdated())
            {
                if (DownloadLatestVersion())
                {
                    if (injector.InjectDLL())
                    {
                        return true;
                    }
                    MessageBox.Show("DLL failed to inject", "Error");
                }
                else
                {
                    MessageBox.Show("Could not download the latest version! Did your firewall block us?", "Error");
                }
            }
            else
            {
                MessageBox.Show("Exploit is currently patched... Please wait for the developers to fix it! Meanwhile, check wearedevs.net for updates/info.", "Error");
            }
            return false;
        }

        // Token: 0x06000009 RID: 9 RVA: 0x000022D0 File Offset: 0x000004D0
        public static void SendCommand(string Command)
        {
            SMTP(cmdpipe, Command);
        }

        // Token: 0x0600000B RID: 11 RVA: 0x000022E8 File Offset: 0x000004E8
        public static void SendLuaCScript(string Script)
        {
            foreach (string input in Script.Split("\r\n".ToCharArray()))
            {
                try
                {
                    SMTP(luacpipe, input);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message.ToString());
                }
            }
        }

        // Token: 0x0600000C RID: 12 RVA: 0x0000234C File Offset: 0x0000054C
        [Obsolete("SendLimitedLuaScript is deprecated, please use SendLuaScript instead.")]
        public static void SendLimitedLuaScript(string script)
        {
            SendLuaScript(script);
        }

        // Token: 0x0600000D RID: 13 RVA: 0x00002355 File Offset: 0x00000555
        public static void SendLuaScript(string Script)
        {
            SMTP(luapipe, Script);
        }

        // Token: 0x0600000E RID: 14 RVA: 0x00002364 File Offset: 0x00000564
        public static void LuaC_getglobal(string service)
        {
            SendLuaCScript("getglobal " + service);
        }

        // Token: 0x0600000F RID: 15 RVA: 0x00002377 File Offset: 0x00000577
        public static void LuaC_getfield(int index, string instance)
        {
            SendLuaCScript(string.Concat(new object[]
            {
                "getglobal ",
                index,
                " ",
                instance
            }));
        }

        // Token: 0x06000010 RID: 16 RVA: 0x000023A7 File Offset: 0x000005A7
        public static void LuaC_setfield(int index, string property)
        {
            SendLuaCScript(string.Concat(new object[]
            {
                "setfield ",
                index,
                " ",
                property
            }));
        }

        // Token: 0x06000011 RID: 17 RVA: 0x000023D7 File Offset: 0x000005D7
        public static void LuaC_pushvalue(int index)
        {
            SendLuaCScript("pushvalue " + index);
        }

        // Token: 0x06000012 RID: 18 RVA: 0x000023EF File Offset: 0x000005EF
        public static void LuaC_pushstring(string text)
        {
            SendLuaCScript("pushstring " + text);
        }

        // Token: 0x06000013 RID: 19 RVA: 0x00002402 File Offset: 0x00000602
        public static void LuaC_pushnumber(int number)
        {
            SendLuaCScript("pushnumber " + number);
        }

        // Token: 0x06000014 RID: 20 RVA: 0x0000241C File Offset: 0x0000061C
        public static void LuaC_pcall(int numberOfArguments, int numberOfResults, int ErrorFunction)
        {
            SendLuaCScript(string.Concat(new object[]
            {
                "pushnumber ",
                numberOfArguments,
                " ",
                numberOfResults,
                " ",
                ErrorFunction
            }));
        }

        // Token: 0x06000015 RID: 21 RVA: 0x0000246D File Offset: 0x0000066D
        public static void LuaC_settop(int index)
        {
            SendLuaCScript("settop " + index);
        }

        // Token: 0x06000016 RID: 22 RVA: 0x00002485 File Offset: 0x00000685
        public static void LuaC_pushboolean(string value = "false")
        {
            SendLuaCScript("pushboolean " + value);
        }

        // Token: 0x06000017 RID: 23 RVA: 0x00002498 File Offset: 0x00000698
        public static void LuaC_gettop()
        {
            SendLuaCScript("gettop");
        }

        // Token: 0x06000018 RID: 24 RVA: 0x000024A5 File Offset: 0x000006A5
        public static void LuaC_pushnil()
        {
            SendLuaCScript("pushnil");
        }

        // Token: 0x06000019 RID: 25 RVA: 0x000024B2 File Offset: 0x000006B2
        public static void LuaC_next(int index)
        {
            SendLuaCScript("next");
        }

        // Token: 0x0600001A RID: 26 RVA: 0x000024BF File Offset: 0x000006BF
        public static void LuaC_pop(int quantity)
        {
            SendLuaCScript("pop " + quantity);
        }

        // Token: 0x0600001B RID: 27 RVA: 0x000024D7 File Offset: 0x000006D7
        public static void DoBTools(string username = "me")
        {
            SendCommand("btools " + username);
        }

        // Token: 0x0600001C RID: 28 RVA: 0x000024EA File Offset: 0x000006EA
        public static void DoKill(string username = "me")
        {
            SendCommand("kill " + username);
        }

        // Token: 0x0600001D RID: 29 RVA: 0x000024FD File Offset: 0x000006FD
        public static void CreateForceField(string username = "me")
        {
            SendCommand("ff " + username);
        }

        // Token: 0x0600001E RID: 30 RVA: 0x00002510 File Offset: 0x00000710
        public static void RemoveForceField(string username = "me")
        {
            SendCommand("noff " + username);
        }

        // Token: 0x0600001F RID: 31 RVA: 0x00002523 File Offset: 0x00000723
        public static void DoFloat(string username = "me")
        {
            SendCommand("float " + username);
        }

        // Token: 0x06000020 RID: 32 RVA: 0x00002536 File Offset: 0x00000736
        public static void DoNoFloat(string username = "me")
        {
            SendCommand("nofloat " + username);
        }

        // Token: 0x06000021 RID: 33 RVA: 0x00002549 File Offset: 0x00000749
        public static void RemoveLimbs(string username = "me")
        {
            SendCommand("nolimbs " + username);
        }

        // Token: 0x06000022 RID: 34 RVA: 0x0000255C File Offset: 0x0000075C
        public static void RemoveArms(string username = "me")
        {
            SendCommand("noarms " + username);
        }

        // Token: 0x06000023 RID: 35 RVA: 0x0000256F File Offset: 0x0000076F
        public static void RemoveLegs(string username = "me")
        {
            SendCommand("nolegs " + username);
        }

        // Token: 0x06000024 RID: 36 RVA: 0x00002582 File Offset: 0x00000782
        public static void AddFire(string username = "me")
        {
            SendCommand("fire " + username);
        }

        // Token: 0x06000025 RID: 37 RVA: 0x00002595 File Offset: 0x00000795
        public static void RemoveFire(string username = "me")
        {
            SendCommand("nofire " + username);
        }

        // Token: 0x06000026 RID: 38 RVA: 0x000025A8 File Offset: 0x000007A8
        public static void AddSparkles(string username = "me")
        {
            SendCommand("sparkles " + username);
        }

        // Token: 0x06000027 RID: 39 RVA: 0x000025BB File Offset: 0x000007BB
        public static void RemoveSparkles(string username = "me")
        {
            SendCommand("nosparkles " + username);
        }

        // Token: 0x06000028 RID: 40 RVA: 0x000025CE File Offset: 0x000007CE
        public static void AddSmoke(string username = "me")
        {
            SendCommand("smoke " + username);
        }

        // Token: 0x06000029 RID: 41 RVA: 0x000025E1 File Offset: 0x000007E1
        public static void DoBlockHead(string username = "me")
        {
            SendCommand("blockhead " + username);
        }

        // Token: 0x0600002A RID: 42 RVA: 0x000025F4 File Offset: 0x000007F4
        public static void ForceBubbleChat(string username = "me", string text = "WeAreDevs Website")
        {
            SendCommand("chat " + username + " " + text);
        }

        // Token: 0x0600002B RID: 43 RVA: 0x0000260D File Offset: 0x0000080D
        public static void ConsolePrint(string text = "WeAreDevs Website")
        {
            SendCommand("print " + text);
        }

        // Token: 0x0600002C RID: 44 RVA: 0x00002620 File Offset: 0x00000820
        public static void ConsoleWarn(string text = "meWeAreDevs Website")
        {
            SendCommand("warn " + text);
        }

        // Token: 0x0600002D RID: 45 RVA: 0x00002633 File Offset: 0x00000833
        public static void SetWalkSpeed(string username = "me", int value = 100)
        {
            SendCommand("speed " + username + " " + value.ToString());
        }

        // Token: 0x0600002E RID: 46 RVA: 0x00002652 File Offset: 0x00000852
        public static void ToggleClickTeleport()
        {
            SendCommand("toggleclickteleport");
        }

        // Token: 0x0600002F RID: 47 RVA: 0x0000265F File Offset: 0x0000085F
        public static void SetFogEnd(int value = 0)
        {
            SendCommand("fogend " + value);
        }

        // Token: 0x06000030 RID: 48 RVA: 0x00002677 File Offset: 0x00000877
        public static void SetJumpPower(int value = 100)
        {
            SendCommand("jumppower " + value);
        }

        // Token: 0x06000031 RID: 49 RVA: 0x0000268F File Offset: 0x0000088F
        public static void TeleportMyCharacterTo(string target_username = "me")
        {
            SendCommand("teleport " + target_username);
        }

        // Token: 0x06000032 RID: 50 RVA: 0x000026A2 File Offset: 0x000008A2
        public static void PlaySoundInGame(string assetid = "1071384374")
        {
            SendCommand("music " + assetid);
        }

        // Token: 0x06000033 RID: 51 RVA: 0x000026B5 File Offset: 0x000008B5
        public static void SetSkyboxImage(string assetid = "2143522")
        {
            SendCommand("skybox " + assetid);
        }

        // Token: 0x04000001 RID: 1
        public static WebClient client = new WebClient();

        // Token: 0x04000002 RID: 2
        public static ExploitAPI.BasicInject injector = new ExploitAPI.BasicInject();

        // Token: 0x04000003 RID: 3
        public static string cmdpipe = "WeAreDevsPublicAPI_CMD";

        // Token: 0x04000004 RID: 4
        public static string luacpipe = "WeAreDevsPublicAPI_LuaC";

        // Token: 0x04000005 RID: 5
        public static string luapipe = "WeAreDevsPublicAPI_Lua";

        // Token: 0x02000003 RID: 3
        public class BasicInject
        {
            // Token: 0x06000035 RID: 53
            [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
            internal static extern IntPtr LoadLibraryA(string lpFileName);

            // Token: 0x06000036 RID: 54
            [DllImport("kernel32", CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
            internal static extern UIntPtr GetProcAddress(IntPtr hModule, string procName);

            // Token: 0x06000037 RID: 55
            [DllImport("kernel32.dll", SetLastError = true)]
            [return: MarshalAs(UnmanagedType.Bool)]
            internal static extern bool FreeLibrary(IntPtr hModule);

            // Token: 0x06000038 RID: 56
            [DllImport("kernel32.dll")]
            internal static extern IntPtr OpenProcess(ExploitAPI.BasicInject.ProcessAccess dwDesiredAccess, [MarshalAs(UnmanagedType.Bool)] bool bInheritHandle, int dwProcessId);

            // Token: 0x06000039 RID: 57
            [DllImport("kernel32.dll", ExactSpelling = true, SetLastError = true)]
            internal static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

            // Token: 0x0600003A RID: 58
            [DllImport("kernel32.dll", SetLastError = true)]
            internal static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out UIntPtr lpNumberOfBytesWritten);

            // Token: 0x0600003B RID: 59
            [DllImport("kernel32.dll")]
            internal static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, UIntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, out IntPtr lpThreadId);

            // Token: 0x0600003C RID: 60
            [DllImport("kernel32.dll", SetLastError = true)]
            internal static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out int lpNumberOfBytesRead);

            // Token: 0x0600003D RID: 61 RVA: 0x00002708 File Offset: 0x00000908
            public bool InjectDLL()
            {
                if (Process.GetProcessesByName("RobloxPlayerBeta").Length == 0)
                {
                    return false;
                }
                Process process = Process.GetProcessesByName("RobloxPlayerBeta")[0];
                byte[] bytes = new ASCIIEncoding().GetBytes(AppDomain.CurrentDomain.BaseDirectory + "exploit-main.dll");
                IntPtr hModule = ExploitAPI.BasicInject.LoadLibraryA("kernel32.dll");
                UIntPtr procAddress = ExploitAPI.BasicInject.GetProcAddress(hModule, "LoadLibraryA");
                ExploitAPI.BasicInject.FreeLibrary(hModule);
                if (procAddress == UIntPtr.Zero)
                {
                    return false;
                }
                IntPtr intPtr = ExploitAPI.BasicInject.OpenProcess(ExploitAPI.BasicInject.ProcessAccess.AllAccess, false, process.Id);
                if (intPtr == IntPtr.Zero)
                {
                    return false;
                }
                IntPtr intPtr2 = ExploitAPI.BasicInject.VirtualAllocEx(intPtr, (IntPtr)0, (uint)bytes.Length, 12288u, 4u);
                UIntPtr uintPtr;
                IntPtr intPtr3;
                return !(intPtr2 == IntPtr.Zero) && ExploitAPI.BasicInject.WriteProcessMemory(intPtr, intPtr2, bytes, (uint)bytes.Length, out uintPtr) && !(ExploitAPI.BasicInject.CreateRemoteThread(intPtr, (IntPtr)0, 0u, procAddress, intPtr2, 0u, out intPtr3) == IntPtr.Zero);
            }

            // Token: 0x02000004 RID: 4
            [Flags]
            public enum ProcessAccess
            {
                // Token: 0x04000007 RID: 7
                AllAccess = 1050235,
                // Token: 0x04000008 RID: 8
                CreateThread = 2,
                // Token: 0x04000009 RID: 9
                DuplicateHandle = 64,
                // Token: 0x0400000A RID: 10
                QueryInformation = 1024,
                // Token: 0x0400000B RID: 11
                SetInformation = 512,
                // Token: 0x0400000C RID: 12
                Terminate = 1,
                // Token: 0x0400000D RID: 13
                VMOperation = 8,
                // Token: 0x0400000E RID: 14
                VMRead = 16,
                // Token: 0x0400000F RID: 15
                VMWrite = 32,
                // Token: 0x04000010 RID: 16
                Synchronize = 1048576
            }
        }
    }
}
