using System;
using System.Windows.Forms;
using System.IO;
using System.Diagnostics;
using System.Security.Cryptography;
using System.Text;

namespace finobeinjector
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main(string[] args)
        {
            if (args == null || args.Length == 0)
            {
                rootAppExe = Path.GetFileName(Process.GetCurrentProcess().MainModule.FileName);
            }
            else if (args[0].Contains("-rootAppName."))
            {
                rootAppExe = args[0].Replace("-rootAppName.", "");
            }
            else if (args[0].Contains("-clrtemp."))
            {
                var tempfile = args[0].Replace("-clrtemp.", "");
                File.Delete(tempfile);
                Environment.Exit(0);
            }
            var currappname = Path.GetFileName(Process.GetCurrentProcess().MainModule.FileName);
            if (currappname == rootAppExe)
            {
                var newappname = GetUniqueKey(10) + ".exe";
                File.Copy(currappname, newappname);
                Process p = new Process();
                p.StartInfo.FileName = newappname;
                p.StartInfo.Arguments = "-rootAppName." + currappname;
                p.Start();
                Environment.Exit(0);
            }
            else
            {
                //Application.EnableVisualStyles();
                Application.SetCompatibleTextRenderingDefault(false);
                Form1 f1 = new Form1();
                f1.Text = GetUniqueKey(69);
                f1.Show();
                Application.Run(f1);
            }
        }

        public static string rootAppExe;
        internal static readonly char[] chars =
        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890".ToCharArray();

        public static string GetUniqueKey(int size)
        {
            byte[] data = new byte[4 * size];
            using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())
            {
                crypto.GetBytes(data);
            }
            StringBuilder result = new StringBuilder(size);
            for (int i = 0; i < size; i++)
            {
                var rnd = BitConverter.ToUInt32(data, i * 4);
                var idx = rnd % chars.Length;

                result.Append(chars[idx]);
            }

            return result.ToString();
        }
    }
}
